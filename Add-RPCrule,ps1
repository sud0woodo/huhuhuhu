<#
.SYNOPSIS
This script is able to check if the external RPC allow Firewall rule is present

.DESCRIPTION
The first check is the RPC check which verifies whether or not RPC connections from external are allowed.
The RPC connection can be recognized in the Windows Firewall with the following query:
v2.10|Action=Allow|Active=TRUE|Dir=In|Protocol=6|LPort=RPC

The Windows registry holds this value at the following location:
HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\services\SharedAccess\Parameters\FirewallPolicy\FirewallRules

If the rule is not present it is added with the following Powershell command:
New-ItemProperty -Path HKLM:\System\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules -Name RPCtest -PropertyType String -Value 
    'v2.10|Action=Allow|Active=TRUE|Dir=In|Protocol=6|LPort=RPC|App=any|Svc=*|Name=Allow RPC IN|Desc=custom RPC allow|'

.EXAMPLE
When not in a Windows domain
.\Add-RPCrule.ps1 -ComputerName targetsystem/IP -User [local Administrator]

When in a Windows domain
.\Add-RPCrule.ps1 -ComputerName targetsystem/IP -User [local Administrator] -Domain $True

.LINK
https://github.com/sud0woodo

.NOTES
DISCLAIMER: I am not a developer, this code is probably not as efficient as it could have been. 
I am not responsible for the usage and outcomes of this tool, this tool was created for educational purposes.

Author: Axel Boesenach / sud0woodo
#>

# Assign arguments to parameters
param(
    [Parameter(Mandatory=$True,Position=1)]
    [String]$ComputerName,

    [Parameter(Mandatory=$True,Position=2)]
    [String]$User,

    [Parameter(Mandatory=$False,Position=4)]
    [String]$Domain
    )

# Add victim machine to trusted hosts
# NOTE: This will prompt if you are sure you want to add the remote machine to the trusted hosts, press Y to confirm
$TrustedClients = Get-Item WSMan:\localhost\Client\TrustedHosts
if ($ComputerName -notin $TrustedClients) {
    Set-Item WSMan:\localhost\Client\TrustedHosts -Value "$ComputerName" -Concatenate
}

# Create the remote connection needed to remotely add the rule
function Get-Session {
    # When connecting to a Domain, the User should be prepended with the Domain name
    if ($Domain) {
        Try {
            Write-Host "[i] Connecting to $ComputerName" -ForegroundColor Yellow
            $session = New-PSSession -ComputerName $ComputerName -Credential $Domain\$User -ErrorAction Stop
            Write-Host "[+] Connected to $ComputerName" -ForegroundColor Green
            return $session
        } Catch [System.Management.Automation.Remoting.PSRemotingTransportException] {
            Write-Host "[!] Creation of Remote Session failed, Access is denied." -ForegroundColor Red
            Write-Host "[!] Exiting..." -ForegroundColor Red
            Break
        } 
    } else {
        Try {
            Write-Host "[i] Connecting to $ComputerName" -ForegroundColor Yellow
            $session = New-PSSession -ComputerName $ComputerName -Credential $ComputerName\$User -ErrorAction Stop
            Write-Host "[+] Connected to $ComputerName" -ForegroundColor Green
            return $session
        } Catch [System.Management.Automation.Remoting.PSRemotingTransportException] {
            Write-Host "[!] Creation of Remote Session failed, Access is denied." -ForegroundColor Red
            Write-Host "[!] Exiting..." -ForegroundColor Red
            Break
        }
    }
}

# Check if the RPC firewall rule is present, returns True if it accepts external connections, False if the rule is not present
function Add-RPCRule {

    # Check if the RPC Firewall rule is present and allows external connections
    Write-Host "[i] Checking if $ComputerName allows External RPC connections..." -ForegroundColor Yellow
    $CheckRPCRule = Invoke-Command -Session $remotesession {
        Get-ItemProperty -Path Registry::HKLM\System\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules | ForEach-Object {
            $_ -Match 'v2.10\|Action=Allow\|Active=TRUE\|Dir=In\|Protocol=6\|LPort=RPC'
        }
    }

    # Add the RPC Firewall rule if not yet present on the target system
    if ($CheckRPCRule -eq $True) {
        Write-Host "`r[+] $ComputerName allows external RPC connections!" -ForegroundColor Green
    } else {
        Write-Host "`r[!] External RPC Firewall rule not found!" -ForegroundColor Red
        Try {
            Write-Host "`r[+] Attempting to add Firewall rule..." -ForegroundColor Yellow
            Invoke-Command -Session $remotesession -ScriptBlock {
                New-ItemProperty -Path HKLM:\System\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules -Name RPCtest -PropertyType String -Value 'v2.10|Action=Allow|Active=TRUE|Dir=In|Protocol=6|LPort=RPC|App=any|Svc=*|Name=Allow RPC IN|Desc=custom RPC allow|'
            }
            Write-Host "`r[+] Firewall rule added!`n" -ForegroundColor Green
        } Catch {
            Write-Host "[!] Failed to add RPC allow Firewall Rule!" -ForegroundColor Red
            Write-Host "[!] Exiting..." -ForegroundColor Red
            Break
        }
    }
}

# Connect to the remote machine and store the session in the remotesession variable
$remotesession = Get-Session

# Add the RPCrule to the target system
Add-RPCRule
